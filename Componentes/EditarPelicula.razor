@using BlazorWeb.Entidades
@using BlazorWeb.Negocio
@inject PeliculaNegocio PeliculaServicio
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject HttpClient Http
@using System.Text.Json;

<h1>Editar Película</h1>

<EditForm Model="@peliculaEditar" OnValidSubmit="@ActualizarPelicula">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <div>
            <label for="titulo">Título: </label>
            <InputText id="titulo" @bind-Value="peliculaEditar.Titulo" class="form-control" />
            <ValidationMessage For="@(() => peliculaEditar.Titulo)" />
        </div>

        <div>
            <label for="director">Director: </label>
            <InputText id="director" @bind-Value="peliculaEditar.Director" class="form-control" />
            <ValidationMessage For="@(() => peliculaEditar.Director)" />
        </div>

        <div>
            <label for="anio">Año: </label>
            <InputNumber id="anio" @bind-Value="peliculaEditar.Anio" class="form-control" />
            <ValidationMessage For="@(() => peliculaEditar.Anio)" />
        </div>

        <div>
            <label for="duracionhoras">Duración (horas): </label>
            <InputNumber id="duracionhoras" @bind-Value="peliculaEditar.DuracionHoras" class="form-control" step="0.1" />
            <ValidationMessage For="@(() => peliculaEditar.DuracionHoras)" />
        </div>

        <div>
            <label for="genero">Género: </label>
            <InputText id="genero" @bind-Value="peliculaEditar.Genero" class="form-control" />
            <ValidationMessage For="@(() => peliculaEditar.Genero)" />
        </div>

        <div>
            <label for="calificacion">Calificación: </label>
            <InputNumber id="calificacion" @bind-Value="peliculaEditar.Calificacion" class="form-control" step="0.1" />
            <ValidationMessage For="@(() => peliculaEditar.Calificacion)" />
        </div>

        <!-- Input para imagen (oculto) -->
        <InputFile id="inputImagen" style="display:none" OnChange="OnInputFileChangeImagen" accept="image/*" />

        <!-- Input para video (oculto) -->
        <InputFile id="inputVideo" style="display:none" OnChange="OnInputFileChangeVideo" accept="video/*" />

        <!-- Botones para activar los inputs -->
        <div class="mb-3 mt-3">
            <label>Imagen: </label>
            <button type="button" class="btn btn-outline-secondary" @onclick="AbrirInputFileImagen">
                Cambiar imagen
            </button>
            @if (!string.IsNullOrEmpty(NombreArchivoImagen))
            {
                <span class="ml-2">@NombreArchivoImagen</span>
            }
            else if (!string.IsNullOrEmpty(peliculaEditar.Imagen))
            {
                <span class="ml-2">Imagen actual: @peliculaEditar.Imagen</span>
            }
        </div>

        <div class="mb-3 mt-3">
            <label>Video: </label>
            <button type="button" class="btn btn-outline-secondary" @onclick="AbrirInputFileVideo">
                Cambiar video
            </button>
            @if (!string.IsNullOrEmpty(NombreArchivoVideo))
            {
                <span class="ml-2">@NombreArchivoVideo</span>
            }
            else if (!string.IsNullOrEmpty(peliculaEditar.Link))
            {
                <span class="ml-2">Video actual: @peliculaEditar.Link</span>
            }
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-4">Actualizar</button>
</EditForm>

@if (!string.IsNullOrEmpty(resultado))
{
    <div class="alert alert-info mt-3">@resultado</div>
    <div class="mt-3">
        <h4>Datos actualizados:</h4>
        <p><strong>Título:</strong> @peliculaEditar.Titulo</p>
        <p><strong>Director:</strong> @peliculaEditar.Director</p>
        <p><strong>Año:</strong> @peliculaEditar.Anio</p>
        <p><strong>Video:</strong> @peliculaEditar.Link</p>
        <p><strong>Duración:</strong> @peliculaEditar.DuracionHoras horas</p>
        <p><strong>Género:</strong> @peliculaEditar.Genero</p>
        <p><strong>Calificación:</strong> @peliculaEditar.Calificacion</p>
        <p><strong>Imagen:</strong> @peliculaEditar.Imagen</p>
    </div>
}

@code {
    [Parameter]
    public int Data { get; set; }
    public int IdPelicula { get; set; }
    [Parameter]
    public EventCallback OnPeliculaActualizada { get; set; }
    private Pelicula peliculaEditar = new Pelicula();
    private string resultado = string.Empty;

    // Variables para el video
    private IBrowserFile ArchivoVideo;
    private string NombreArchivoVideo = string.Empty;
    private string videoUrl = "";

    // Variables para la imagen
    private IBrowserFile ArchivoImagen;
    private string NombreArchivoImagen = string.Empty;
    private string imagenUrl = "";

    protected override async Task OnInitializedAsync()
    {
        // Cargar los datos de la película a editar
        var peliculas = await PeliculaServicio.listarPeliculas();
        var peliculaExistente = peliculas.FirstOrDefault(p => p.IdPelicula == Data);

        if (peliculaExistente != null)
        {
            peliculaEditar = new Pelicula
                {
                    IdPelicula = Data,
                    Titulo = peliculaExistente.Titulo,
                    Director = peliculaExistente.Director,
                    Anio = peliculaExistente.Anio,
                    Link = peliculaExistente.Link,
                    DuracionHoras = peliculaExistente.DuracionHoras,
                    Genero = peliculaExistente.Genero,
                    Calificacion = peliculaExistente.Calificacion,
                    Imagen = peliculaExistente.Imagen
                };
        }
    }

    private async Task ActualizarPelicula()
    {
        try
        {
            // Subir nueva imagen si se seleccionó una
            if (ArchivoImagen != null)
            {
                await GuardarImagen();
                if (!string.IsNullOrEmpty(imagenUrl))
                {
                    peliculaEditar.Imagen = imagenUrl;
                }
            }

            // Subir nuevo video si se seleccionó uno
            if (ArchivoVideo != null)
            {
                await GuardarVideo();
                if (!string.IsNullOrEmpty(videoUrl))
                {
                    peliculaEditar.Link = videoUrl;
                }
            }

            bool actualizado = await PeliculaServicio.actualizarPeliculas(peliculaEditar);
            resultado = actualizado ? "Película actualizada correctamente" : "Error al actualizar";

            if (actualizado)
            {
                await OnPeliculaActualizada.InvokeAsync(null);
                await Task.Delay(1500);
                NavigationManager.NavigateTo("/peliculas");
            }
        }
        catch (Exception ex)
        {
            resultado = $"Error: {ex.Message}";
        }
    }

    // Métodos para el video
    private async Task AbrirInputFileVideo()
    {
        await JS.InvokeVoidAsync("abrirInputFile", "inputVideo");
    }

    private void OnInputFileChangeVideo(InputFileChangeEventArgs e)
    {
        ArchivoVideo = e.File;
        NombreArchivoVideo = ArchivoVideo.Name;
        StateHasChanged();
    }

    private async Task GuardarVideo()
    {
        if (ArchivoVideo == null)
            return;

        var formData = new MultipartFormDataContent();
        var streamContent = new StreamContent(ArchivoVideo.OpenReadStream(maxAllowedSize: 150 * 1024 * 1024)); // 150 MB

        streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(ArchivoVideo.ContentType);
        formData.Add(streamContent, "file", ArchivoVideo.Name);

        var url = "http://localhost:5050/api/file/file/InventarioEquiposComputo/SW52ZW50YXJpb0VxdXBvc2RlQ29tcHV0bw===&RGVzYXJvbGluZw==&UmFpei==&SW1hZ2VuRXh0ZW5zaW9u";

        var response = await Http.PutAsync(url, formData);
        var responseContent = await response.Content.ReadAsStringAsync();
        var jsonDoc = JsonDocument.Parse(responseContent);
        var root = jsonDoc.RootElement;

        string fileName = root.GetProperty("img").GetString();
        videoUrl = "http://localhost:5050/uploads/InventarioEquipos/" + fileName;
        Console.WriteLine(videoUrl);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Video subido con éxito.");
        }
        else
        {
            Console.WriteLine("Error al subir el video.");
        }
    }

    // Métodos para la imagen
    private async Task AbrirInputFileImagen()
    {
        await JS.InvokeVoidAsync("abrirInputFile", "inputImagen");
    }

    private void OnInputFileChangeImagen(InputFileChangeEventArgs e)
    {
        ArchivoImagen = e.File;
        NombreArchivoImagen = ArchivoImagen.Name;
        StateHasChanged();
    }

    private async Task GuardarImagen()
    {
        if (ArchivoImagen == null)
            return;

        var formData = new MultipartFormDataContent();
        var streamContent = new StreamContent(ArchivoImagen.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // 10 MB

        streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(ArchivoImagen.ContentType);
        formData.Add(streamContent, "file", ArchivoImagen.Name);

        var url = "http://localhost:5050/api/file/file/InventarioEquiposComputo/SW52ZW50YXJpb0VxdXBvc2RlQ29tcHV0bw===&RGVzYXJvbGluZw==&UmFpei==&SW1hZ2VuRXh0ZW5zaW9u";

        var response = await Http.PutAsync(url, formData);
        var responseContent = await response.Content.ReadAsStringAsync();
        var jsonDoc = JsonDocument.Parse(responseContent);
        var root = jsonDoc.RootElement;

        string fileName = root.GetProperty("img").GetString();
        imagenUrl = "http://localhost:5050/uploads/InventarioEquipos/" + fileName;
        Console.WriteLine(imagenUrl);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Imagen subida con éxito.");
        }
        else
        {
            Console.WriteLine("Error al subir la imagen.");
        }
    }
}

<script>
    window.abrirInputFile = (inputId) => {
        document.getElementById(inputId).click();
    };
</script>